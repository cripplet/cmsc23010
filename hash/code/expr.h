#ifndef EXPR_H
#define EXPR_H

#define ITER 3

/* Experiments to run */

#define IDLE 2		// analyze overhead generated by an uncontested lock
#define SCAL 4		// analyze overhead generated by a contested lock
#define FAIR 8		// analyze lock scheduling policies
#define POHD 16		// analyze overhead in the firewall when using uncontested locks
#define PSCL 32		// analyze use-cases scheduling policies which will result in the best speedup
#define TUNE 64		// tunes the backoff lock

/* Locking strategies */

#define LFRE 1		// lock-free
#define HOMQ 2		// home queue - needlessly acquire a lock before dequeuing
#define RNDQ 4		// deq from random peer queue
#define LSTQ 8		// deq using try_lock
#define AWSM 16

#define THREADS 4
#define LOG_THREADS 2
#define MEAN_WORK 4000
#define TWO_SECONDS 2

void custom();
void one();
void two();
void three();
void three_aux(float hit_rate, int log_threads);

#endif
